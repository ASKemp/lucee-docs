{
  "pageType":"tag",
  "title":"processingdirective",
  "name":"processingdirective",
  "description":"Suppresses extra white space and other output, produced by CFML within the tag's scope.",
  "status":null,
  "appendix":false,
  "bodyContentType":"free",
  "attributeType":"fixed",
  "minimumAttributes":null,
  "handleException":"true",
  "allowRemovingLiteral":"yes",
  "sourceClasses":{
    "tag":"lucee.runtime.tag.ProcessingDirective",
    "ttt":null,
    "tdbt":null,
    "att":null,
    "tte":"lucee.transformer.cfml.evaluator.impl.ProcessingDirective"
  },
  "script":{
    "type":"multiple",
    "runtimeExpressionValue":"true",
    "context":null
  },
  "attributes":[
    {
      "name":"suppressWhiteSpace",
      "type":"boolean",
      "default":false,
      "defaultValue":null,
      "description":"Boolean indicating whether to suppress the white space and other output generated by the\n\t\tCFML tags within the cfprocessingdirective block.",
      "aliases":[
        
      ],
      "values":[
        
      ],
      "status":null,
      "required":false,
      "noname":false,
      "scriptSupport":null,
      "runTimeExpressionValue":true
    },
    {
      "name":"executionlog",
      "type":"boolean",
      "default":false,
      "defaultValue":null,
      "description":"Boolean indicating whether to write execution log or not.",
      "aliases":[
        
      ],
      "values":[
        
      ],
      "status":null,
      "required":false,
      "noname":false,
      "scriptSupport":null,
      "runTimeExpressionValue":true
    },
    {
      "name":"pageEncoding",
      "type":"string",
      "default":false,
      "defaultValue":null,
      "description":"A string literal; the character encoding to use to read the page. The value may be enclosed in single or double quotation marks, or none.",
      "aliases":[
        
      ],
      "values":[
        
      ],
      "status":null,
      "required":false,
      "noname":false,
      "scriptSupport":null,
      "runTimeExpressionValue":true
    },
    {
      "name":"preserveCase",
      "type":"boolean",
      "default":false,
      "defaultValue":null,
      "description":"\ndeclare how variable keys defined by dot notation are handled.\nIf set to false converts all struct keys defined with \"dot notation\" to upper case.\nExample:\n- sct.dotNotation --> keyname: \"DOTNOTATION\"\n- sct[\"bracketNotation\"] --> keyname: \"bracketNotation\"\n\nIf set to true keep all struct keys defined with \"dot notation\" in original case (according to the \"bracket notation\").\nExample:\nsct.dotNotation --> keyname: \"dotNotation\"\nsct[\"bracketNotation\"] --> keyname: \"bracketNotation\"\n\t\t\t",
      "aliases":[
        
      ],
      "values":[
        
      ],
      "status":null,
      "required":false,
      "noname":false,
      "scriptSupport":null,
      "runTimeExpressionValue":true
    }
  ],
  "examples":[
    
  ],
  "history":[
    
  ]
}